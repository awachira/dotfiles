#!/usr/bin/env python

import os
import sys

from invoke import run
from invoke.vendor import yaml2 as yaml


# Helpers
def cmd(command):
    run("tmux send-keys \"{0}\" Enter".format(command))

def cmd_all(layout):
    if 'cmd_all' in layout:
        cmd(layout['cmd_all'])

def layout_path(name):
    filename = "{0}.yml".format(name)
    return os.path.expanduser(os.path.join('~', '.tmux', filename))


# Usage: mux <layout-name-or-default-layout-parameter>
try:
    arg = sys.argv[1]
except IndexError:
    sys.exit("Need to give a layout name / parameter!")
# If name given matches a layout, use it.
# Otherwise select default layout and parameterize it instead
path = layout_path(arg)
if os.path.exists(path):
    arg = None
else:
    path = layout_path('default')
# Load YAML config & interpolate w/ param given
with open(path) as fd:
    data = fd.read()
    interpolated = data.format(arg) if arg is not None else data
    layout = yaml.safe_load(interpolated)

# Obtain window name - explicit -> 1st param -> nothing/default-tmux-val
name = layout.get('name', arg)
name_arg = "-n {0}".format(name) if name else ""
# Create new named window & obtain size
ret = run(
    "tmux new-window {0} -P -F \"#{{pane_width}}\"".format(name_arg),
    hide='stdout'
)
width = int(ret.stdout)
# Send default command to this first pane
cmd_all(layout)

# Split down middle for two vertically oriented panes
# Size left pane depending on total window size (161 or 80). Rather, size the
# new (right) pane based on whatever's left over, which is easier.
if width >= (161 + 1 + 80):
    right_width = width - 162
else:
    right_width = width - 81
run("tmux split-window -h -l {0}".format(right_width))
# Send default command to this next pane (which is selected by default)
cmd_all(layout)
# Send non-default command, if any
first = layout['right_panes'].pop(0)
cmd(first)

# Split horizontally on right-hand pane if desired
for pane_cmd in layout['right_panes']:
    run("tmux split-window -v")
    if pane_cmd:
        cmd(pane_cmd)
