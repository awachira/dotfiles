#!/usr/bin/env python
"""
Script to identify lapses in 'ts' elapsed-microsecond output log files.

E.g. if your stdin to the script looks like:

    00:00:00.116502 debug1: Enabling compatibility mode for protocol 2.0
    00:00:00.116519 debug1: Local version string SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.7
    00:00:00.280922 debug1: Remote protocol version 2.0, remote software version OpenSSH_5.9p1 Debian-5ubuntu1.4
    00:00:00.280973 debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.4 pat OpenSSH_5* compat 0x0c000000

It will identify and print the 2nd and 3rd lines, with '... 0.17s ...' in
between them. And same for any other lapses greater than 0.05s or a float given
as 1st positional argument.
"""

# TODO: flexible timestamp formats? hampered by fact that python strftime
# doesn't actually recognize microsecond formats...maybe an argument for using
# some other 'ts' arguments on input?


import sys
from datetime import timedelta as td


def delta_to_floatsec(diff):
    subseconds = diff.microseconds / 1000.0 / 1000.0
    return diff.seconds + subseconds

def truncate(text, length=40):
    words = text.split(' ')
    joined = ""
    for word in words:
        if len(joined) < length:
            if joined:
                joined += ' '
            joined += word
    return joined

tolerance = 0.05
if len(sys.argv) > 1:
    tolerance = float(sys.argv[1])

# 2 seconds seems like enough for most Python apps to load up; obviously this
# presumes such apps begin logging early on and not after some slow operation.
reasonable_startup_time = 2000
seen_first_line = False

start = prev_stamp = td()
prev_line = prev_rest = "<beginning of time>"

transitions = []

for line in sys.stdin.readlines():
    start_too_big = False
    # Chop line
    line = line.strip()
    if not line:
        continue
    stamp, _, rest = line.partition(' ')
    # Parse timestamp
    if ':' in stamp:
        # 'ts -s' style
        hours, mins, secs = [float(x) for x in stamp.split(':')]
        now = td(hours=hours, minutes=mins, seconds=secs)
    elif stamp.isdigit():
        # python logging %(relativeCreated)d style
        ms = int(stamp)
        now = td(milliseconds=ms)
        # Using multiprocessing in Python appears to inherit relative creation
        # load time from the parent/main process or...something? Guard against
        # that pattern if seen (start of time is a large number).
        if ms > reasonable_startup_time:
            start_too_big = True
    else:
        raise ValueError("No idea how to parse timestamp {0!r} from line {1!r}".format(stamp, line))
    # Get interval
    diff = now - prev_stamp
    # Decide whether to print
    elapsed = delta_to_floatsec(diff)
    # TODO: maybe emit to stderr or something when we do this; otherwise it
    # could mask actual 'first thing logged is slow' situations.
    skip = (not seen_first_line) and start_too_big
    if (elapsed > tolerance) and not skip:
        # Don't separate adjacent transitions
        # TODO: this could mask multiple adjacent lines; ideally we want to
        # preserve full line so we can compare that instead, which will be
        # fully unique thanks to timestamps.
        if (not transitions) or transitions[-1][2] != prev_rest:
            print("")
            print(prev_line)
        print("  ... {0:.2f}s ...".format(elapsed))
        print(line)
        transitions.append((prev_rest, elapsed, rest))
    # Iterate
    prev_stamp = now
    prev_line = line
    prev_rest = rest
    seen_first_line = True

# Summarize
total_delta = now - start
total_elapsed = delta_to_floatsec(total_delta)
# TODO: at what point is it worth requiring I have some humanize lib installed
# in my global python env? sigh
widest_prev = max(len(truncate(x)) for x, _, _ in transitions)
widest_cur = max(len(truncate(x)) for _, _, x in transitions)

print("\n-------\n")
print("Total elapsed time: {0:.2f}s\n".format(total_elapsed))
print("-------\n")
print("Transitions sorted by length:\n")

for prev_rest, elapsed, rest in sorted(transitions, key=lambda x: x[1], reverse=True):
    prev = truncate(prev_rest)
    cur = truncate(rest)
    print("{0}...{1}->  {2:.2f}s  ->{3}{4}...".format(
        prev,
        (widest_prev - len(prev) + 2) * ' ',
        elapsed,
        (widest_cur - len(cur) + 2) * ' ',
        cur,
    ))
